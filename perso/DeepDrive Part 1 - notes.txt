import this
PEP 20 (Pep documents)

------------
Class hierarchy
NUMBERS
Integral

Non-integral
	• Float
	• Complex
	• Decimals
	• Fractions

COLLECTIONS
	• Sequences
	• Sets
		○ A set is like a dictionary with only keys
	• Mappings

CALLABLES
	• Functions
	• Generators
	• Classes
	• Instance Methods
	• __call__()
	• Built-in functions
	• Built-in Methods

SINGLETONS
	• None
	• NotImplemented
    * Ellipsis (…)


-----
Variables conventions:
_xxx (internal / private object)
  ** will not be imported with "from xxx import *"
  
__xxx - unsed to mangle ckass attributes - useful in inheritance

__xxx__ system-defined names - Don't use!

Look at "PEP 8" style guide
Packages: short, all lowercase
Modules: short, all lowercase
Classes: CamelCase
Functions, variables: snake_case
Constants: MIN_APR (All uppercase, underscores)

-----   
No switch/case in Pyton!! Use if/elif/else
if/else one-liner:
X if condition else Y

-----
def my_func(a: int):
the type is only indicating

Lambdas:
f = lambda x: x**2


-----
do while:
while True:
    code block
    if xxx :
        break
        
while xxx:
    code block
else:
    code block executed only if no "break" was encountered
   
----
try...except...finally
finally always executes, even if there was a "continue" or "break" before

----
for loops are for "iterables"
for i in iterable
while loop is closer to C++ for loops
for can have "else" as for while loops
automatic indexing:
for i in len(iterable):
    print (i, iterable[i])
    
for i, c in enumerate(iterable):
    print (i, c)
    
-----
hex(id(xxx)) # Gives the address of xxx
orverload str: __str__
Representation __repr__ - Standard is to show how constructor was called.
overload ==: __eq__
  Always check type also with instance (not type, because it will not handle subclasses)
  if instance(other, Rectangle)
Others: __lt__, __gt__, __ne__, __lte__
PAs besoin dImplémenter lt et gt, Python va faire l'invese automatiquement.

Important: when adding attributes to a class, think if you should encapsulate with getters/setters at the beginning...

Instance methods:
@property
def _xxx(self):
   return self._property
@xxx.setter
def xxx(self, value):
   self._property = value
   
   
Section 3
---------
Everything is an object!!

----
Ref count is automatic by Python Memory Manager
sys.getrefcount(d)
ctypes.c_long.from_address(id(d)).value
----
Garbage collector can be turned off: gc.disable()   # Stops collecting, but keeps tracks of objects
To resume: gc.collect()
Destrctutor: __del__
Use Python 3.4 and above
----
ALL VARIABLES ARE REFERENCES !!!
USE type() to know the current type of the data refered by a variable.
----
Every time we assing a new value, a new object is created
Values referenced by variable can never be changed!!
a = 10
b = 10
------> a anf b MIGHT point to the same address because a and b are poiting to immutable object!!!!
That would not be true if they where pointing to lists.
-----
Immutable: numbers, strings, tuples (), frozen sets, User classes 
Mutable: lists [], sets, dictionaries, User classes
sys.getsizeof()
-----
When we do "x = x + y"
a new object is always created from "x + y", even if x is mutable
-----
Variable equality:
"is" indicate if they point to the same address ("is not" or "not(is)")
"==" indicates if values are identical ("!=")
-----
To assign a variable to a function, don't use the ()
a = my_funct
a = my_funct() --> Will invoke the function!
We can call the constructor of an int. See help(int)
-----
CPython
JPython
ironPython c#
pyPy
...
"Interning" - ints: -5 tp 256   ----> Singletons
Strings: identifiers (no garantee)
  Can be forced! a = sys.intern("xxx")
- Comparing strings with high chances of high occurences
- When comparing lots of string
-----
Peephole
Constants expressions are optimized. Ex: 24*60
Short sequences < 20. Ex: (1, 2) * 5. "Hello" + " World"
if e in [1, 2, 3]:   # The list is changed to mutable (to a tuple) sets -> frozensets
set membership is much faster than a list (tree vs linked list)
if e in [1, 2, 3]:  # use a set instead: {1, 2, 3}

