import this
PEP 20 (Pep documents)

------------
Class hierarchy
NUMBERS
Integral

Non-integral
	• Float
	• Complex
	• Decimals
	• Fractions

COLLECTIONS
	• Sequences
	• Sets
		○ A set is like a dictionary with only keys
	• Mappings

CALLABLES
	• Functions
	• Generators
	• Classes
	• Instance Methods
	• __call__()
	• Built-in functions
	• Built-in Methods

SINGLETONS
	• None
	• NotImplemented
    * Ellipsis (…)


-----
Variables conventions:
_xxx (internal / private object)
  ** will not be imported with "from xxx import *"
  
__xxx - unsed to mangle ckass attributes - useful in inheritance

__xxx__ system-defined names - Don't use!

Look at "PEP 8" style guide
Packages: short, all lowercase
Modules: short, all lowercase
Classes: CamelCase
Functions, variables: snake_case
Constants: MIN_APR (All uppercase, underscores)

-----   
No switch/case in Pyton!! Use if/elif/else
if/else one-liner:
X if condition else Y

-----
def my_func(a: int):
the type is only indicating

Lambdas:
f = lambda x: x**2


-----
do while:
while True:
    code block
    if xxx :
        break
        
while xxx:
    code block
else:
    code block executed only if no "break" was encountered
   
----
try...except...finally
finally always executes, even if there was a "continue" or "break" before

----
for loops are for "iterables"
for i in iterable
while loop is closer to C++ for loops
for can have "else" as for while loops